[
  {
    "objectID": "posts/fitness-friend/fitness.html",
    "href": "posts/fitness-friend/fitness.html",
    "title": "Shiny Fitness Application",
    "section": "",
    "text": "The Shiny package provides a flexible, easy to use framework for creating interactive web applications with R. Quarto in turn includes support for embedding Shiny components and applets into documents created with the Knitr engine.\n\n \n\nIf the iframe is too small you can go to the web page by clicking here"
  },
  {
    "objectID": "posts/fitness-friend/fitness.html#shiny",
    "href": "posts/fitness-friend/fitness.html#shiny",
    "title": "Shiny Fitness Application",
    "section": "",
    "text": "The Shiny package provides a flexible, easy to use framework for creating interactive web applications with R. Quarto in turn includes support for embedding Shiny components and applets into documents created with the Knitr engine.\n\n \n\nIf the iframe is too small you can go to the web page by clicking here"
  },
  {
    "objectID": "posts/spotify-rewrapped/spotify-rewrapped.html",
    "href": "posts/spotify-rewrapped/spotify-rewrapped.html",
    "title": "Spotify Re-Wrapped",
    "section": "",
    "text": "To view the other tabs in the site click on the side bar and select the tab. \nIf the iframe is too small you can go to the web page by clicking here"
  },
  {
    "objectID": "posts/spotify-rewrapped/spotify-rewrapped.html#shiny-app",
    "href": "posts/spotify-rewrapped/spotify-rewrapped.html#shiny-app",
    "title": "Spotify Re-Wrapped",
    "section": "",
    "text": "To view the other tabs in the site click on the side bar and select the tab. \nIf the iframe is too small you can go to the web page by clicking here"
  },
  {
    "objectID": "posts/rob-zombie/index.html",
    "href": "posts/rob-zombie/index.html",
    "title": "Data Mining Text Mining Adventure",
    "section": "",
    "text": "Using data mining text mining sentiment analysis to explore the emotional impact of Rob Zombie’s iconic album, Hellbilly Deluxe (1998). This album is known for its distinctive blend of horror, metal, and industrial sounds. We try to find insights into the album’s influence on listener emotions. The research underscores the power of sentiment analysis in deciphering the intricate interplay between musical elements and emotional responses, providing a comprehensive understanding of the emotional dynamics evoked by this unique musical work. It is known that music affects a human’s state of emotion, but it is important to consider the level of complexity that the emotional state could represent."
  },
  {
    "objectID": "posts/rob-zombie/index.html#about",
    "href": "posts/rob-zombie/index.html#about",
    "title": "Data Mining Text Mining Adventure",
    "section": "",
    "text": "Using data mining text mining sentiment analysis to explore the emotional impact of Rob Zombie’s iconic album, Hellbilly Deluxe (1998). This album is known for its distinctive blend of horror, metal, and industrial sounds. We try to find insights into the album’s influence on listener emotions. The research underscores the power of sentiment analysis in deciphering the intricate interplay between musical elements and emotional responses, providing a comprehensive understanding of the emotional dynamics evoked by this unique musical work. It is known that music affects a human’s state of emotion, but it is important to consider the level of complexity that the emotional state could represent."
  },
  {
    "objectID": "posts/rob-zombie/index.html#exploratory-data-analysis",
    "href": "posts/rob-zombie/index.html#exploratory-data-analysis",
    "title": "Data Mining Text Mining Adventure",
    "section": "Exploratory Data Analysis",
    "text": "Exploratory Data Analysis\n\nLyrics &lt;- read_excel(\"RobZombieSheet.xlsx\")\nhead(Lyrics)\n\n# A tibble: 6 × 3\n  song_name           lyrics                                     song_length_sec\n  &lt;chr&gt;               &lt;chr&gt;                                                &lt;dbl&gt;\n1 Call of the zombie  \"And out of the darkness, the Zombie did …              30\n2 Superbeast          \"Shriek the lips\\nAcross ragged tongue,\\n…             220\n3 Dragula             \"Dead I am the one, Exterminating son\\nSl…             222\n4 Living Dead Girl    \"Rage in the cage\\nAnd piss upon the stag…             201\n5 Perversion 99        &lt;NA&gt;                                                  103\n6 Demonoid Phenomenon \"Hell on Earth\\nFor What It's Worth\\nDead…             251\n\n\n\nCleanLyrics &lt;- Lyrics %&gt;%\n  unnest_tokens(word, lyrics, token = \"words\") %&gt;%   \n filter(!word %in% stop_words$word, str_detect(word, \"[a-z]\"))\nhead(CleanLyrics, 10)\n\n# A tibble: 10 × 3\n   song_name          song_length_sec word     \n   &lt;chr&gt;                        &lt;dbl&gt; &lt;chr&gt;    \n 1 Call of the zombie              30 darkness \n 2 Call of the zombie              30 zombie   \n 3 Call of the zombie              30 call     \n 4 Call of the zombie              30 true     \n 5 Call of the zombie              30 pain     \n 6 Call of the zombie              30 suffering\n 7 Call of the zombie              30 brought  \n 8 Call of the zombie              30 ran      \n 9 Call of the zombie              30 children \n10 Call of the zombie              30 hide     \n\n\n\nSent &lt;- CleanLyrics %&gt;%\n  inner_join(get_sentiments(\"bing\")) %&gt;%\n count(song_name, sentiment) %&gt;%\n spread(sentiment, n, fill = 0)%&gt;%\n mutate(sentiment = positive - negative)\n\nJoining with `by = join_by(word)`\n\nSent\n\n# A tibble: 12 × 4\n   song_name                                     negative positive sentiment\n   &lt;chr&gt;                                            &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;\n 1 Call of the zombie                                   6        0        -6\n 2 Demonoid Phenomenon                                 18        2       -16\n 3 Dragula                                             27        3       -24\n 4 How to make a monster                               16        0       -16\n 5 Living Dead Girl                                    34        3       -31\n 6 meet the creeper                                    11        3        -8\n 7 Return of the phantom stranger                      16        6       -10\n 8 spookshow baby                                      13        3       -10\n 9 Superbeast                                          34        5       -29\n10 Th beginning of the end                              3        0        -3\n11 The ballad of resurrection joe and rosa whore       25       16        -9\n12 What lurks on channel x                             12        0       -12\n\n\n\nFreq &lt;- CleanLyrics %&gt;% group_by(word) %&gt;% \n summarise(uses = n()) %&gt;% \n arrange(desc(uses))\nhead(Freq)\n\n# A tibble: 6 × 2\n  word    uses\n  &lt;chr&gt;  &lt;int&gt;\n1 yeah      45\n2 dead      25\n3 baby      22\n4 ragged    14\n5 love      13\n6 meet      13\n\n\n\nFreq %&gt;%\n  slice(1:20) %&gt;%\n  ggplot() + \n geom_bar(aes(x = reorder(word, uses), y = uses), stat = \"identity\", color = 'purple', fill = 'green') +\n coord_flip() + \n labs(y = \"Frequency of use\",\n x = \"Words\") +\n theme_minimal() + \ntheme_dark() + \n  ggtitle('Frequency of Words in Rob Zombie Songs')\n\n\n\n\n\nLyricCloud&lt;- CleanLyrics%&gt;%\n  anti_join(stop_words) %&gt;%\n  count(word) %&gt;%\n  with(wordcloud(word, n, color = c(\"maroon\"), max.words=100))\n\nJoining with `by = join_by(word)`\n\n\n\n\n\n\nwordcloud2(data = Freq,color = \"random-dark\", backgroundColor = \"grey\",  minRotation = pi/3, maxRotation = -pi/6, minSize = 10,\n  rotateRatio = 1)\n\n\n\n\n\n\nLyricsCloud2&lt;- CleanLyrics%&gt;%\n  inner_join(get_sentiments(\"bing\")) %&gt;%\n  count(word, sentiment, sort = TRUE) %&gt;%\n  acast(word~sentiment, value.var =\"n\", fill=0) %&gt;%\n  comparison.cloud(colors = c(\"black\",\"green\"), max.words = 100)\n\nJoining with `by = join_by(word)`\n\n\n\n\n\n\nggplot(data = Sent) + \n  geom_point(aes(x = song_name,\n                 y=sentiment, color = Sent$sentiment)) +\n  theme_minimal() +\n  coord_flip() +\n  theme_dark() +\n  ggtitle('Sentiment Score Comparison') + \n  scale_colour_gradient(low = \"green\", high = \"orange\") + \n  guides(color = guide_legend(title = \"Sentiment Range\")) +\n  theme(axis.text = element_text(size = 6), \n        axis.title = element_text(size = 14),\n        plot.title = element_text(size = 18, face = \"bold\")) + \n  xlab('Song Name') + \n  ylab('Sentiment')\n\n\n\n\n\nCleanWords &lt;- CleanLyrics %&gt;%\ninner_join(get_sentiments(\"nrc\")) %&gt;%\n  group_by(sentiment, word) %&gt;%\n  count(mycount = n()) %&gt;%\n  distinct() %&gt;%\n  filter(sentiment %in%\n  c(\"trust\", \"joy\",\"surprise\",\"anticipation\", \"fear\", \"anger\", \"disgust\", \"sadness\"))\n\nJoining with `by = join_by(word)`\n\nhead(CleanLyrics)\n\n# A tibble: 6 × 3\n  song_name          song_length_sec word     \n  &lt;chr&gt;                        &lt;dbl&gt; &lt;chr&gt;    \n1 Call of the zombie              30 darkness \n2 Call of the zombie              30 zombie   \n3 Call of the zombie              30 call     \n4 Call of the zombie              30 true     \n5 Call of the zombie              30 pain     \n6 Call of the zombie              30 suffering\n\n\n\nCleanWords %&gt;%\n  ggplot() + \n geom_bar(aes(x = sentiment), color = 'green', fill = 'purple') +\n coord_flip() + \n labs(y = \"Frequency\",\n x = \"Sentiment\") +\n theme_minimal() + \ntheme_dark() + \n  ggtitle('Frequency of Sentiment')\n\n\n\n\n\nclean &lt;- merge(CleanLyrics, CleanWords, by = \"word\")\n\n\nSentBySong&lt;- data.frame(table(clean$song_name, clean$sentiment))\n\n\nggplot(SentBySong, aes(x = Var2, y = Freq, color = Var1), cex = 0.2) + \n        geom_point() + \n        facet_wrap(~ Var1) +\n        theme_dark() +\n        theme(text = element_text(size=5),\n        axis.text.x = element_text(angle=90, hjust=1)) +\n        guides(color = guide_legend(title = \"Song Names\")) +\n        xlab(\"Sentiment\") +\n        ylab(\"Frequency\") +\n        ggtitle(\"Frequency of Sentiment by Song\") +\n        theme(plot.title = element_text(hjust = 0.5))\n\n\n\n\n\nggplot(Lyrics, aes(x= song_length_sec, y=song_name, fill = song_name)) +\n  geom_bar(stat=\"identity\") +\n  theme_dark() +\n  theme(text = element_text(size=8),\n  axis.text.x = element_text(angle=60, hjust=1)) +\n  theme(legend.position=\"none\") +\n  coord_flip() +\n  xlab(\"Song Length\") +\n  ylab(\"Song Name\") +\n  ggtitle(\"Duration of General Sentiment by Song\") +\n  theme(plot.title = element_text(hjust = 0.5))"
  },
  {
    "objectID": "code/hashing /hashing.html",
    "href": "code/hashing /hashing.html",
    "title": "Hashing",
    "section": "",
    "text": "a hash map is an unordered data structure that stores key-value pairs. A hash map can add and remove elements in O(1), as well as update values associated with a key and check if a key exists, also in O(1)."
  },
  {
    "objectID": "code/hashing /hashing.html#checking-for-existence",
    "href": "code/hashing /hashing.html#checking-for-existence",
    "title": "Hashing",
    "section": "Checking for Existence",
    "text": "Checking for Existence\nExample 1: 1. Two Sum Given an array of integers nums and an integer target, return indices of two numbers such that they add up to target. You cannot use the same index twice.\n\nJavaPython\n\n\n\n    private static int[] targetSumHash(int[] nums, int target) {\n\n        Map&lt;Integer, Integer&gt; hasMap = new HashMap&lt;&gt;();\n\n        for(int i=0; i&lt;nums.length;i++){\n            int num = nums[i];\n            int complement = target - num;\n            if(hasMap.containsKey(complement)){ // This operation is O(1)!\n                System.out.println(hasMap.get(complement));\n                return new int[] {i, hasMap.get(complement)};\n            }\n            hasMap.put(num,i);\n        }\n        return new int[] {-1,1};\n    \n    }\n\n\ndef twoSum(nums: list[int], target: int) -&gt; list[int]:\n    hash = {}\n    for i in range(len(nums)):\n        num = nums[i]\n        complement = target - num\n        if complement in hash: # This operation is O(1)!\n            return [i,hash[complement]]\n        hash[num]=i\n    return [-1,-1]\nTime: O(n) Space O(n)\n\n\n\nExample 2: 2351. First Letter to Appear Twice Given a string s, return the first character to appear twice. It is guaranteed that the input will have a duplicate character.\n\nJavaPython\n\n\n\nprivate static char repeatedCharacter(String s) {\n  Set&lt;Character&gt; seen = new HashSet&lt;&gt;();\n  for(int i=0; i&lt;s.length();i++){\n      char c = s.charAt(i);\n      if(seen.contains(c)){\n          return c;\n            }\n      seen.add(c);\n        }\n        return ' ';\n        \n    }\n\n\ndef repeatedChar(self, s: str)-&gt;str:\n    seen =set()\n    for i in s:\n        c = s[i]\n        if c in s:\n            return c\n        seen.add(c)\n    return \" \"\nTime: O(n) Space O(1)-&gt;26 letters in the alphabet or O(m) m number of allowable characters in the input\n\n\n\nExample 3: Given an integer array nums, find all the unique numbers x in nums that satisfy the following: x + 1 is not in nums, and x - 1 is not in nums.\n\nJavaPython\n\n\n\n    public static List&lt;Integer&gt; findNumbers(int[] nums) {\n        List&lt;Integer&gt; ans = new ArrayList&lt;&gt;(); //resizable array\n        Set&lt;Integer&gt; numSet = new HashSet&lt;&gt;();\n\n        for (int num: nums){ // add all the elements to the set \n            numSet.add(num);\n        }\n        for(int num:nums){ //check constraint and add to answer array\n\n            if(!numSet.contains(num+1) && !numSet.contains(num-1)){ \n                ans.add(num); \n            }\n        }\n        return ans;\n\n\n    }\n\n\ndef findNum(nums:list[int])-&gt;list[int]:\n    ans =[]\n    nums= set(nums)\n    for num in nums:\n        if(num+1 not in nums)and (num -1 not in nums):\n            ans.append(num)\n    return ans\n\n\n\nTime: O(n) Space: O(n)"
  },
  {
    "objectID": "code/hashing /hashing.html#leetcode-problem",
    "href": "code/hashing /hashing.html#leetcode-problem",
    "title": "Hashing",
    "section": "Leetcode Problem",
    "text": "Leetcode Problem\n\nCheck if the Sentence Is Pangram\nA pangram is a sentence where every letter of the English alphabet appears at least once.\nGiven a string sentence containing only lowercase English letters, return true if sentence is a pangram, or false otherwise.\n\nJavaPython\n\n\n    private static boolean isPanagram(String s) {\n        Set&lt;Character&gt; string = new HashSet&lt;&gt;();\n\n        for(int i=0;i&lt;s.length();i++){ // iteate through the string\n            string.add(s.charAt(i)); //sets can't hold duplicate values\n            if(string.size() == 26){ // alphabet has 26 letters therefore, if string size = 26 it must be a panagram\n                return true;\n            }\n\n        }\n        return false;\n\n    }\n\n\ndef isPanagram(s:str)-&gt; bool:\n    s = set(s)\n    if(len(s) == 26):\n        return True\n\n    return False\nTo improve this code i could have not used the if statement and just returned len(s)==26\n\n\n\n\n\nMissing Number\nGiven an array nums containing n distinct numbers in the range [0, n], return the only number in the range that is missing from the array.\nExample 1:\nInput: nums = [3,0,1] Output: 2 Explanation: n = 3 since there are 3 numbers, so all numbers are in the range [0,3]. 2 is the missing number in the range since it does not appear in nums.\n\nJava\n\n\nprivate static int missingNum(int[] nums) {\n  List&lt;Integer&gt; ans = new ArrayList&lt;&gt;(); //resizable array\n        for(int num: nums){ \n            ans.add(num);\n        }\n\n        for(int i=nums.length; i&gt;0;i--){\n            if(!ans.contains(i)){\n                return i;\n            }\n        }\n        return 0;\n    }"
  },
  {
    "objectID": "code/array-strings/array-string.html",
    "href": "code/array-strings/array-string.html",
    "title": "Arrays and Strings",
    "section": "",
    "text": "Both represent ordered group of elements\n\n\n\nLanguage\nArray and String\n\n\n\n\nPython\nImmutable\n\n\nJava\nImmutable.\n\n\nC++\nMutable\n\n\n\nDifferent ways to solve arrays and string problems:\n\nTwo Pointers\nSliding Window\nPrefix Sum\nString builder\nSubarrays/substrings, subsequences, and subsets"
  },
  {
    "objectID": "code/array-strings/array-string.html#two-pointers-examples",
    "href": "code/array-strings/array-string.html#two-pointers-examples",
    "title": "Arrays and Strings",
    "section": "Two Pointers Examples",
    "text": "Two Pointers Examples\n\nReverse String Write a function that reverses a string. The input string is given as an array of characters s. You must do this by modifying the input array in-place with O(1) extra memory\n\n\nJavaPython\n\n\n public static void reverseString(char[] s) {\n        int i = s.length-1; \n        int j= 0; \n        \n        while(i &gt; j ){\n            char tmp = s[j];\n            s[j++]=s[i];\n            s[i--]=tmp;\n        }\n        System.out.println(s);\n        \n    }   \n\n\n\nclass Solution(object):\n    def reverseString(self, s):\n    s.reverse()\n\n\n\n\nSquares of a Sorted Array Given an integer array nums sorted in non-decreasing order, return an array of the squares of each number sorted in non-decreasing order.\n\n\nJavaJavaPython\n\n\n    public int[] sortedSquares(int[] nums) {\n        \n        int left = 0;\n        int right = nums.length-1;\n\n        while(left &lt;= right){\n        \n            int tmp = nums[left]*nums[left];\n            nums[left] = tmp;\n            left++;\n        }\n        Arrays.sort(nums);\n\n        return nums;\n    }\n\n\n//After my first submission I realized this could be cleaner\n    public int[] sortedSquares(int[] nums) {\n        for(int i=0; i&lt; nums.length;i++){\n            nums[i] = nums[i] * nums[i];\n        }\n        Arrays.sort(nums);\n        return nums;\n    }\n\n\ndef sortedSquares(self, nums: List[int]) -&gt; List[int]:\n  for i in range(len(nums)):\n      nums[i] = nums[i] *nums[i]\n  nums = sorted(nums)\n  return nums"
  },
  {
    "objectID": "code/array-strings/array-string.html#subarrays",
    "href": "code/array-strings/array-string.html#subarrays",
    "title": "Arrays and Strings",
    "section": "Subarrays",
    "text": "Subarrays\nContinuous section of the array. All the elements must be adjacent to each other and in their original order\nExample: [1,2,3,4]\n\n[1],[2],[3],[4]\n[1,2],[2,3],[3,4]\n[1,2,3], [2,3,4]\n\nIdentifying when to use this:\nThe problem will: 1. Explicitly or implicitly define criteria that makes a subarray “valid”. 2. Ask you to find valid subarrays in some way - find the “best” valid subarray - finding the number of valid subarrays"
  },
  {
    "objectID": "code/array-strings/array-string.html#psudocode-1",
    "href": "code/array-strings/array-string.html#psudocode-1",
    "title": "Arrays and Strings",
    "section": "Psudocode",
    "text": "Psudocode\nfunction fn(nums, k):\n    left = 0\n    curr = 0\n    answer = 0\n    for (int right = 0; right &lt; nums.length; right++):\n        curr += nums[right]\n        while (curr &gt; k):\n            curr -= nums[left]\n            left++\n\n        answer = max(answer, right - left + 1)\n\n    return answer\n\nExample 1: Given an array of positive integers nums and an integer k, find the length of the longest subarray whose sum is less than or equal to k. This is the problem we have been talking about above. We will now formally solve it."
  },
  {
    "objectID": "code/array-strings/array-string.html#java-7",
    "href": "code/array-strings/array-string.html#java-7",
    "title": "Arrays and Strings",
    "section": "Java",
    "text": "Java\n    public static int subarray(int[] nums, int k) {\n        int left =0;\n        int sum = 0;\n        int answer = 0;\n\n        for(int right =0; right&lt;nums.length;right++){\n            sum += nums[right];\n            while(sum &gt; k){\n                sum -= nums[left];\n                left++;\n            }\n            answer = Math.max(answer, right - left + 1);\n\n        }\n\nExample 2: You are given a binary string s (a string containing only “0” and “1”). You may choose up to one “0” and flip it to a “1”. What is the length of the longest substring achievable that contains only “1”? For example, given s = “1101100111”, the answer is 5. If you perform the flip at index 2, the string becomes 1111100111.\n\n\nJavaPython\n\n\npublic static int binarySubarray(String s) {\n    int left =0;\n    int counter = 0;\n    int answer = 0;\n\n    for(int i =0; i&lt;s.length();i++){\n        if (s.charAt(i)== '0') {\n            counter++;\n\n        }\n\n        while(counter &gt; 1){\n            if (s.charAt(left) == '0') {\n                counter--;\n            }\n\n            left++;\n        }\n\n        answer = Math.max(answer, i - left + 1);\n    }\n\n        \n        return answer;\n\n    }\n\n\ndef binarySubarray(s):\n\n    left=counter=answer=0\n\n    for i in range(len(s)):\n        if s[i] ==\"0\":\n            counter +=1\n        while counter &gt; 1:\n            if(s[left] == \"0\"):\n                counter -= 1\n            left += 1\n\n        ans = max(answer, i - left + 1)\n\n    return(ans)"
  },
  {
    "objectID": "code/array-strings/array-string.html#number-of-subarrays",
    "href": "code/array-strings/array-string.html#number-of-subarrays",
    "title": "Arrays and Strings",
    "section": "Number of Subarrays",
    "text": "Number of Subarrays\n\nExample 3: 713. Subarray Product Less Than K. Given an array of positive integers nums and an integer k, return the number of subarrays where the product of all the elements in the subarray is strictly less than k. For example, given the input nums = [10, 5, 2, 6], k = 100, the answer is 8. The subarrays with products less than k are:[10], [5], [2], [6], [10, 5], [5, 2], [2, 6], [5, 2, 6]\n\npublic static int productLessThan(int[] nums, int k) {\n        int left =0;\n        int counter = 1;\n        int answer = 0;\n\n        if (k &lt;= 1) {\n            return 0;\n        }\n        for(int right =0; right&lt;nums.length;right++){\n            counter *= nums[right];\n            while(counter&gt;=k){\n                counter /= nums[left]; //opposite of multiplication remove that element \n                left += 1;\n            }\n            answer += right -left +1;\n    }\n        return answer;\n\n    }"
  },
  {
    "objectID": "code/array-strings/array-string.html#fixed-window-size",
    "href": "code/array-strings/array-string.html#fixed-window-size",
    "title": "Arrays and Strings",
    "section": "Fixed window size",
    "text": "Fixed window size"
  },
  {
    "objectID": "code/array-strings/array-string.html#psudocode-2",
    "href": "code/array-strings/array-string.html#psudocode-2",
    "title": "Arrays and Strings",
    "section": "Psudocode",
    "text": "Psudocode\nfunction fn(arr, k):\n    curr = some data to track the window\n\n    // build the first window\n    for (int i = 0; i &lt; k; i++)\n        Do something with curr or other variables to build first window\n\n    ans = answer variable, probably equal to curr here depending on the problem\n    for (int i = k; i &lt; arr.length; i++)\n        Add arr[i] to window\n        Remove arr[i - k] from window\n        Update ans\n\n    return ans"
  },
  {
    "objectID": "code/array-strings/array-string.html#leetcode-problem",
    "href": "code/array-strings/array-string.html#leetcode-problem",
    "title": "Arrays and Strings",
    "section": "Leetcode Problem",
    "text": "Leetcode Problem\n\nExample 4: Given an integer array nums and an integer k, find the sum of the subarray with the largest sum whose length is k.\n\npublic static int productLessThan(int[] nums, int k) {\n        int left =0;\n        int counter = 1;\n        int answer = 0;\n\n        if (k &lt;= 1) {\n            return 0;\n        }\n        for(int right =0; right&lt;nums.length;right++){\n            counter *= nums[right];\n            while(counter&gt;=k){\n                counter /= nums[left]; //opposite of multiplication remove that element \n                left += 1;\n            }\n            answer += right -left +1;\n    }\n        return answer;\n\n    }\n1004. Max Consecutive Ones III: Given a binary array nums and an integer k, return the maximum number of consecutive 1’s in the array if you can flip at most k 0’s.\nExample 1: Input: nums = [1,1,1,0,0,0,1,1,1,1,0], k = 2 Output: 6 Explanation: [1,1,1,0,0,1,1,1,1,1,1] Bolded numbers were flipped from 0 to 1. The longest subarray is underlined..\n\nJava\n\n\npublic static int productLessThan(int[] nums, int k) {\n        int left =0;\n        int counter = 1;\n        int answer = 0;\n\n        if (k &lt;= 1) {\n            return 0;\n        }\n        for(int right =0; right&lt;nums.length;right++){\n            counter *= nums[right];\n            while(counter&gt;=k){\n                counter /= nums[left]; //opposite of multiplication remove that element \n                left += 1;\n            }\n            answer += right -left +1;\n    }\n        return answer;\n\n    }\nTime complexity:O(n) Space complexity:O(1) 3ms Runtime Beats 79.28% of users with Java"
  },
  {
    "objectID": "code/array-strings/array-string.html#leetcode-problem-1",
    "href": "code/array-strings/array-string.html#leetcode-problem-1",
    "title": "Arrays and Strings",
    "section": "Leetcode Problem",
    "text": "Leetcode Problem\nGiven an array nums. We define a running sum of an array as runningSum[i] = sum(nums[0]…nums[i]). Return the running sum of nums\nExample 1: Input: nums = [1,2,3,4] Output: [1,3,6,10] Explanation: Running sum is obtained as follows: [1, 1+2, 1+2+3, 1+2+3+4].\n\nJava\n\n\n    private static int[] runningSum(int[] nums) {\n        int [] prefix = new int[nums.length];\n        prefix[0]=nums[0];\n        for(int i=1;i&lt;nums.length;i++){\n            prefix[i] = nums[i]+prefix[i-1];\n        }\n        return prefix;\n\n    }\nTime complexity:O(n) Space complexity:O(n) It creates an additional array prefix of the same length as the input array nums. The size of the prefix array is proportional to the size of the input array, making the space complexity linear.\nRuntime 0ms Beats100.00% of users with Java"
  },
  {
    "objectID": "code/array-strings/array-string.html#on-string-building",
    "href": "code/array-strings/array-string.html#on-string-building",
    "title": "Arrays and Strings",
    "section": "O(n) String Building",
    "text": "O(n) String Building\n\nPythonJava\n\n\ndef build_string(s):\n  arr=[] #declar a list\n  for c in s\n      arr.append(c) #add the characters to the list \n    return \"\".join(list) # convert the list to a string \nO(n)\n\n\npublic string buildString(String s) {\n    StringBuilder sb = new StringBuilder(); //use string builder\n    for (int i = 0; i &lt; s.length(); i++) {\n        sb.append(s.charAt(i)); // add character to the list\n    }\n    StringBuilder.toString() // convert list to string\n    return sb.toString();\n\n    \nO(n)"
  },
  {
    "objectID": "projects.html",
    "href": "projects.html",
    "title": "Projects",
    "section": "",
    "text": "Shiny Fitness Application\n\n\n\n\n\nShiny application serving as a generalized fitness guide. This tool assists users in calculating metrics like basic metabolic rate (BMR), total daily energy expenditure (TDEE), macronutrients, and even generating personalized meal plans via the ChatGPT API.\n\n\n\n\n\n\nJan 12, 2024\n\n\nValentina Colorado,\n\n\n\n\n\n\n  \n\n\n\n\nData Mining Text Mining Adventure\n\n\n\n\n\nUsing data mining text mining sentiment analysis to explore the emotional impact of Rob Zombie’s iconic album, Hellbilly Deluxe (1998).\n\n\n\n\n\n\nJan 10, 2024\n\n\nValentina Colorado, Alexandra Desaulniers\n\n\n\n\n\n\n  \n\n\n\n\nSpotify Re-Wrapped\n\n\n\n\n\nUsing Spotify listening data to create data analysis on my listening history. Also including an interactive tab where users can upload their own spotify data to get personalized song reccomendations\n\n\n\n\n\n\nMay 1, 2023\n\n\nValentina Colorado, Isabel Zimmerman\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "valentina colorado",
    "section": "",
    "text": "Florida Polytechnic University | Lakeland, FL\nMS in Computer Science | Jan 2023 - Dec 2023\nFlorida Polytechnic University | Lakeland, FL\nBS in Computer Science | Aug 2019 - May 2022"
  },
  {
    "objectID": "index.html#education",
    "href": "index.html#education",
    "title": "valentina colorado",
    "section": "",
    "text": "Florida Polytechnic University | Lakeland, FL\nMS in Computer Science | Jan 2023 - Dec 2023\nFlorida Polytechnic University | Lakeland, FL\nBS in Computer Science | Aug 2019 - May 2022"
  },
  {
    "objectID": "index.html#publications",
    "href": "index.html#publications",
    "title": "valentina colorado",
    "section": "Publications",
    "text": "Publications\nInsight into the Capabilities of Machine Learning Explainability Software Through the Evaluation of Two Prominent Open-Source Tools | 2023 Published by AS-Proceedings"
  },
  {
    "objectID": "leetcode.html",
    "href": "leetcode.html",
    "title": "Leetcode",
    "section": "",
    "text": "Arrays and Strings\n\n\n\n\n\nGoing over basic arrays and strings content and leetcode problems\n\n\n\n\n\n\nJan 28, 2024\n\n\nValentina Colorado\n\n\n\n\n\n\n  \n\n\n\n\nHashing\n\n\n\n\n\nGoing over hashing topics and leetcode problems\n\n\n\n\n\n\nJan 3, 2024\n\n\nValentina Colorado\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "code/array-strings/array-string.html#python-1",
    "href": "code/array-strings/array-string.html#python-1",
    "title": "Arrays and Strings",
    "section": "Python",
    "text": "Python\n      s.reverse()\n:::\nTime: O(n) Space:O(1)\n\nExample 2: Given a sorted array of unique integers and a target integer, return true if there exists a pair of numbers that sum to target, false otherwise. This problem is similar to Two Sum. (In Two Sum, the input is not sorted). For example, given nums = [1, 2, 4, 6, 8, 9, 14, 15] and target = 13, return true because 4 + 9 = 13.\n\n\nJavaPython\n\n\n    public static boolean targetSum(int[] nums,int target){\n\n        int left =0;\n        int right = nums.length-1;\n\n\n        while(left&lt;right){\n            int sum = nums[left]+nums[right];\n            if(sum == target){\n                return true; \n            }\n            else if(sum&gt;target){\n                right--;\n\n            }\n            else{\n                left++;\n            }\n    }\n    return false;\n        \n\n    }\n\n\ndef targetSum(nums:list[int], target:int ) -&gt; bool:\n\n    left =0\n    right = len(nums)-1\n\n\n    while left&lt;right:\n         sum = nums[left]+nums[right]\n         if(sum == target):\n            return True\n         elif(sum&gt;target):\n             right -=1\n         else:\n             left += 1\n    return False\n\n\n\nTime: O(n) Space:O(1)\n\nExample 3: Given two sorted integer arrays arr1 and arr2, return a new array that combines both of them and is also sorted.\n\n\nJava\n\n\npublic static List&lt;Integer&gt; combinedSorted(int[] arr1, int[]arr2){\n\n        \n        List&lt;Integer&gt;  arr3 = new ArrayList&lt;&gt;();\n        int i =0;\n        int j =0;\n\n        while(i &lt;arr1.length && j&lt;arr2.length){\n            if(arr1[i]&lt;arr2[j]){\n                arr3.add(arr1[i]);\n                i++;\n            }\n            else{\n                arr3.add(arr2[j]);\n                j++;\n            }\n            \n        }\n        // After the first while loop one of the arrays will have gone through completly\n        while (i &lt; arr1.length) {\n            arr3.add(arr1[i]);\n            i++;\n        }\n    \n        while (j &lt; arr2.length) {\n            arr3.add(arr2[j]);\n            j++;\n        }\n    \n        return arr3;\n    }\n}\n\n\n\nTime: O(n) Space:O(1)\n\nExample 4: 392. Is Subsequence. Given two strings s and t, return true if s is a subsequence of t, or false otherwise.\n\n\nJava\n\n\n\n public static boolean checkIfSubsequence(String s, String t){\n    int i =0;\n    int j =0;\n\n    while(i &lt; s.length() && j&lt;t.length()){\n        if(s.charAt(i)==t.charAt(j)){\n            i++;\n        }\n         \n        j++;\n        \n    }\n    return i == s.length();\n }\n\n}\n\n\n\nTime: O(n) Space:O(1)\nA subsequence of a string is a sequence of characters that can be obtained by deleting some (or none) of the characters from the original string, while maintaining the relative order of the remaining characters. For example, “ace” is a subsequence of “abcde” while “aec” is not."
  },
  {
    "objectID": "code/array-strings/array-string.html#java-8",
    "href": "code/array-strings/array-string.html#java-8",
    "title": "Arrays and Strings",
    "section": "Java",
    "text": "Java\n    public static int subarray(int[] nums, int k) {\n        int left =0;\n        int sum = 0;\n        int answer = 0;\n\n        for(int right =0; right&lt;nums.length;right++){\n            sum += nums[right];\n            while(sum &gt; k){\n                sum -= nums[left];\n                left++;\n            }\n            answer = Math.max(answer, right - left + 1);\n\n        }\n\nExample 2: You are given a binary string s (a string containing only “0” and “1”). You may choose up to one “0” and flip it to a “1”. What is the length of the longest substring achievable that contains only “1”? For example, given s = “1101100111”, the answer is 5. If you perform the flip at index 2, the string becomes 1111100111.\n\n\nJavaPython\n\n\npublic static int binarySubarray(String s) {\n    int left =0;\n    int counter = 0;\n    int answer = 0;\n\n    for(int i =0; i&lt;s.length();i++){\n        if (s.charAt(i)== '0') {\n            counter++;\n\n        }\n\n        while(counter &gt; 1){\n            if (s.charAt(left) == '0') {\n                counter--;\n            }\n\n            left++;\n        }\n\n        answer = Math.max(answer, i - left + 1);\n    }\n\n        \n        return answer;\n\n    }\n\n\ndef binarySubarray(s):\n\n    left=counter=answer=0\n\n    for i in range(len(s)):\n        if s[i] ==\"0\":\n            counter +=1\n        while counter &gt; 1:\n            if(s[left] == \"0\"):\n                counter -= 1\n            left += 1\n\n        ans = max(answer, i - left + 1)\n\n    return(ans)"
  }
]