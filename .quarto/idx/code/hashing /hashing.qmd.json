{"title":"Hashing","markdown":{"yaml":{"title":"Hashing","author":"Valentina Colorado","date":"2024-01-03","categories":["Java","Python","Data Structures","Algorithms","Hashing"],"image":"https://miro.medium.com/v2/resize:fit:1400/1*8hAoOurJFBfA-w1wKUAqIA.gif","description":"Going over hashing topics and leetcode problems","format":{"html":{"toc":true,"html-math-method":"katex","css":"styles.css"}}},"headingText":"Basic Examples","containsRefs":false,"markdown":"\n\n*A hash map is an unordered data structure that stores key-value pairs*\n\n+----------------------------------------------------------+-------------------------------------------------------------------------------------------+---------------------------------------------------------------------------------------------------+\n| Name                                                     | Benefits                                                                                  | Disadvantages                                                                                     |\n+==========================================================+===========================================================================================+===================================================================================================+\n| Chaining: Technique used for avoiding ***collisions***   | -   Insertion O(1)                                                                        | -   Keys are not evenly distributed                                                               |\n|                                                          |                                                                                           |                                                                                                   |\n|                                                          | -   Can grow infinitely as long as there is enough space                                  | -   Separate chaining can lead to empty spaces in table                                           |\n|                                                          |                                                                                           |                                                                                                   |\n|                                                          | -   Never needs to be resized                                                             | -   List in the positions can be very long                                                        |\n+----------------------------------------------------------+-------------------------------------------------------------------------------------------+---------------------------------------------------------------------------------------------------+\n| Sets: Uses same mechanism for hashing keys into integers | -   Sets do not map their keys to anything                                                | -   Don't track frequency                                                                         |\n|                                                          |                                                                                           |                                                                                                   |\n|                                                          | -   Add remove elements in O(1)                                                           | -   Elements in a set can only be accessed with pointers, there is no indexing in set like arrays |\n|                                                          |                                                                                           |                                                                                                   |\n|                                                          | -   Set are dynamic, so there is no error of overflowing of the set.                      | -   O(logN) time complexity for **basic operations** like insertion and deletion.                 |\n|                                                          |                                                                                           |                                                                                                   |\n|                                                          | -   Sets can be used to improve performance in many algorithms by providing fast lookups. |                                                                                                   |\n+----------------------------------------------------------+-------------------------------------------------------------------------------------------+---------------------------------------------------------------------------------------------------+\n\n\n::: panel-tabset\n## Java\n\n``` java\n\npublic class Example {\n    public static void main(String[] args) {        \n        Map<Integer, Integer> myHashMap = new HashMap<>();\n        // myHashMap has integers for both keys and values\n        \n        myHashMap.put(4, 83);\n        System.out.println(myHashMap.get(4)); // Prints 83\n        System.out.println(myHashMap.containsKey(4)); // Prints true\n        System.out.println(myHashMap.containsKey(854)); // Prints false\n        \n        myHashMap.put(8, 327);\n        myHashMap.put(45, 82523);\n        \n        for (int key: myHashMap.keySet()) {\n            System.out.println(String.format(\"%d: %d\", key, myHashMap.get(key)));\n        }\n    }\n}\n```\n\n## Python\n\n``` python\n    hash_map = {}\n    hash_map[4] = 83 \n    print(hash_map[4])# prints 83 \n\n    print(854 in hash_map) #print False\n    print(4 in hash_map) #print True\n\n    hash_map[8]=327 # new key, value\n\n    for key,val in hash_map.items(): #iterate and print out all key, values\n        print(f\"{key}: {val}\")\n```\n:::\n\n## Checking for Existence\n\n*Example 1: 1. Two Sum Given an array of integers nums and an integer target, return indices of two numbers such that they add up to target.* You cannot use the same index twice.\n\n::: panel-tabset\n## Java\n\n``` java\n\n    private static int[] targetSumHash(int[] nums, int target) {\n\n        Map<Integer, Integer> hasMap = new HashMap<>();\n\n        for(int i=0; i<nums.length;i++){\n            int num = nums[i];\n            int complement = target - num;\n            if(hasMap.containsKey(complement)){ // This operation is O(1)!\n                System.out.println(hasMap.get(complement));\n                return new int[] {i, hasMap.get(complement)};\n            }\n            hasMap.put(num,i);\n        }\n        return new int[] {-1,1};\n    \n    }\n```\n\n## Python\n\n``` python\ndef twoSum(nums: list[int], target: int) -> list[int]:\n    hash = {}\n    for i in range(len(nums)):\n        num = nums[i]\n        complement = target - num\n        if complement in hash: # This operation is O(1)!\n            return [i,hash[complement]]\n        hash[num]=i\n    return [-1,-1]\n```\n\n*Time: O(n) Space O(n)*\n:::\n\n*Example 2: 2351. First Letter to Appear Twice* Given a string s, return the first character to appear twice. It is guaranteed that the input will have a duplicate character.\n\n::: panel-tabset\n## Java\n\n``` java\n\nprivate static char repeatedCharacter(String s) {\n  Set<Character> seen = new HashSet<>();\n  for(int i=0; i<s.length();i++){\n      char c = s.charAt(i);\n      if(seen.contains(c)){\n          return c;\n            }\n      seen.add(c);\n        }\n        return ' ';\n        \n    }\n```\n\n## Python\n\n``` python\ndef repeatedChar(self, s: str)->str:\n    seen =set()\n    for i in s:\n        c = s[i]\n        if c in s:\n            return c\n        seen.add(c)\n    return \" \"\n```\n\n*Time: O(n) Space O(1)-\\>26 letters in the alphabet or O(m) m* number of allowable characters in the input\n:::\n\nExample 3: Given an integer array nums, find all the unique numbers x in nums that satisfy the following: x + 1 is not in nums, and x - 1 is not in nums.\n","srcMarkdownNoYaml":"\n\n*A hash map is an unordered data structure that stores key-value pairs*\n\n+----------------------------------------------------------+-------------------------------------------------------------------------------------------+---------------------------------------------------------------------------------------------------+\n| Name                                                     | Benefits                                                                                  | Disadvantages                                                                                     |\n+==========================================================+===========================================================================================+===================================================================================================+\n| Chaining: Technique used for avoiding ***collisions***   | -   Insertion O(1)                                                                        | -   Keys are not evenly distributed                                                               |\n|                                                          |                                                                                           |                                                                                                   |\n|                                                          | -   Can grow infinitely as long as there is enough space                                  | -   Separate chaining can lead to empty spaces in table                                           |\n|                                                          |                                                                                           |                                                                                                   |\n|                                                          | -   Never needs to be resized                                                             | -   List in the positions can be very long                                                        |\n+----------------------------------------------------------+-------------------------------------------------------------------------------------------+---------------------------------------------------------------------------------------------------+\n| Sets: Uses same mechanism for hashing keys into integers | -   Sets do not map their keys to anything                                                | -   Don't track frequency                                                                         |\n|                                                          |                                                                                           |                                                                                                   |\n|                                                          | -   Add remove elements in O(1)                                                           | -   Elements in a set can only be accessed with pointers, there is no indexing in set like arrays |\n|                                                          |                                                                                           |                                                                                                   |\n|                                                          | -   Set are dynamic, so there is no error of overflowing of the set.                      | -   O(logN) time complexity for **basic operations** like insertion and deletion.                 |\n|                                                          |                                                                                           |                                                                                                   |\n|                                                          | -   Sets can be used to improve performance in many algorithms by providing fast lookups. |                                                                                                   |\n+----------------------------------------------------------+-------------------------------------------------------------------------------------------+---------------------------------------------------------------------------------------------------+\n\n# Basic Examples\n\n::: panel-tabset\n## Java\n\n``` java\n\npublic class Example {\n    public static void main(String[] args) {        \n        Map<Integer, Integer> myHashMap = new HashMap<>();\n        // myHashMap has integers for both keys and values\n        \n        myHashMap.put(4, 83);\n        System.out.println(myHashMap.get(4)); // Prints 83\n        System.out.println(myHashMap.containsKey(4)); // Prints true\n        System.out.println(myHashMap.containsKey(854)); // Prints false\n        \n        myHashMap.put(8, 327);\n        myHashMap.put(45, 82523);\n        \n        for (int key: myHashMap.keySet()) {\n            System.out.println(String.format(\"%d: %d\", key, myHashMap.get(key)));\n        }\n    }\n}\n```\n\n## Python\n\n``` python\n    hash_map = {}\n    hash_map[4] = 83 \n    print(hash_map[4])# prints 83 \n\n    print(854 in hash_map) #print False\n    print(4 in hash_map) #print True\n\n    hash_map[8]=327 # new key, value\n\n    for key,val in hash_map.items(): #iterate and print out all key, values\n        print(f\"{key}: {val}\")\n```\n:::\n\n## Checking for Existence\n\n*Example 1: 1. Two Sum Given an array of integers nums and an integer target, return indices of two numbers such that they add up to target.* You cannot use the same index twice.\n\n::: panel-tabset\n## Java\n\n``` java\n\n    private static int[] targetSumHash(int[] nums, int target) {\n\n        Map<Integer, Integer> hasMap = new HashMap<>();\n\n        for(int i=0; i<nums.length;i++){\n            int num = nums[i];\n            int complement = target - num;\n            if(hasMap.containsKey(complement)){ // This operation is O(1)!\n                System.out.println(hasMap.get(complement));\n                return new int[] {i, hasMap.get(complement)};\n            }\n            hasMap.put(num,i);\n        }\n        return new int[] {-1,1};\n    \n    }\n```\n\n## Python\n\n``` python\ndef twoSum(nums: list[int], target: int) -> list[int]:\n    hash = {}\n    for i in range(len(nums)):\n        num = nums[i]\n        complement = target - num\n        if complement in hash: # This operation is O(1)!\n            return [i,hash[complement]]\n        hash[num]=i\n    return [-1,-1]\n```\n\n*Time: O(n) Space O(n)*\n:::\n\n*Example 2: 2351. First Letter to Appear Twice* Given a string s, return the first character to appear twice. It is guaranteed that the input will have a duplicate character.\n\n::: panel-tabset\n## Java\n\n``` java\n\nprivate static char repeatedCharacter(String s) {\n  Set<Character> seen = new HashSet<>();\n  for(int i=0; i<s.length();i++){\n      char c = s.charAt(i);\n      if(seen.contains(c)){\n          return c;\n            }\n      seen.add(c);\n        }\n        return ' ';\n        \n    }\n```\n\n## Python\n\n``` python\ndef repeatedChar(self, s: str)->str:\n    seen =set()\n    for i in s:\n        c = s[i]\n        if c in s:\n            return c\n        seen.add(c)\n    return \" \"\n```\n\n*Time: O(n) Space O(1)-\\>26 letters in the alphabet or O(m) m* number of allowable characters in the input\n:::\n\nExample 3: Given an integer array nums, find all the unique numbers x in nums that satisfy the following: x + 1 is not in nums, and x - 1 is not in nums.\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"markdown"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"html-math-method":"katex","css":["styles.css"],"output-file":"hashing.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.306","theme":{"light":["flatly","light.scss"],"dark":["darkly","dark.scss"]},"title":"Hashing","author":"Valentina Colorado","date":"2024-01-03","categories":["Java","Python","Data Structures","Algorithms","Hashing"],"image":"https://miro.medium.com/v2/resize:fit:1400/1*8hAoOurJFBfA-w1wKUAqIA.gif","description":"Going over hashing topics and leetcode problems"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}