---
title: "Arrays and Strings"
author: "Valentina Colorado"
date: "2024-01-28"
date-modified: "2024-07-08"
categories: [Java, Python,Data Structures, Algorithms, Arrays, Strings]
image: https://miro.medium.com/v2/resize:fit:1200/1*YWjJuLuXJULb-2IyYhqnXQ.gif
description: "Going over basic arrays and strings content and leetcode problems"
format:
  html:
    toc: true
    html-math-method: katex
    css: styles.css
editor: 
  markdown: 
    wrap: 72
---

# Arrays and Strings

*Both represent ordered group of elements*

| Language | Array and String |
|----------|------------------|
| Python   | Immutable        |
| Java     | Immutable.       |
| C++      | Mutable          |

Different ways to solve arrays and string problems:

-   [Two Pointers]
-   [Sliding Window]
-   [Prefix Sum]
-   String builder
-   Subarrays/substrings, subsequences, and subsets

# Two Pointers

Working from the front and back. 1. Start one pointer at first index 0.
and the other pointer at last index input.length-1 2. while loop until
the pointers == each other

::: panel-tabset
## Psudocode

``` 
def function fn(arr):
  left =0
  right = arr.length-1
  
  while left < right:
    if left matches the right right
    1. left++
    2. right--
  else 
    false
```
:::

> Use two pointers to check if a string is palindrome

::: panel-tabset
## Java

``` java
    public static boolean checkIfPalindrome(String s1){
        int left =0;
        int right = s1.length()-1;

        while(left<right){
            if(s1.charAt(left)== s1.charAt(right)){
                left++;
                right--;
                
            }
            else{
                return false;
            }
        }
        return true;
    }
```

## Python

``` python
def checkIfPalindrome(s: str) -> bool:

    left =0
    right = len(s)-1

    while left<right:
        
        if s[left] == s[right]:
            left += left
            right -= right
                
        else:
            return False;
                
            
    return True;
```
:::


>Write a function that reverses a string. The input string is given as an array of characters s.


::: panel-tabset
## Java

``` java

    private static char[] reverseString(char[] input) {
        //solve using two pointer method
        int left =0;
        int right = input.length-1;
        char tmp;

         while(left < right){
             tmp = input[left];
             input[left]=input[right];
             input[right]=tmp;

             left++;
             right--;
         }
         return input;


    }
```

## Python

``` python
      s.reverse()
```
:::




*Time: O(n) Space:O(1)*

> Example 2: Given a sorted array of unique integers and a target
> integer, return true if there exists a pair of numbers that sum to
> target, false otherwise. This problem is similar to Two Sum. (In Two
> Sum, the input is not sorted). For example, given nums = \[1, 2, 4, 6,
> 8, 9, 14, 15\] and target = 13, return true because 4 + 9 = 13.

::: panel-tabset
## Java

``` java
    public static boolean targetSum(int[] nums,int target){

        int left =0;
        int right = nums.length-1;


        while(left<right){
            int sum = nums[left]+nums[right];
            if(sum == target){
                return true; 
            }
            else if(sum>target){
                right--;

            }
            else{
                left++;
            }
    }
    return false;
        

    }
```

## Python

``` python
def targetSum(nums:list[int], target:int ) -> bool:

    left =0
    right = len(nums)-1


    while left<right:
         sum = nums[left]+nums[right]
         if(sum == target):
            return True
         elif(sum>target):
             right -=1
         else:
             left += 1
    return False
```
:::

*Time: O(n) Space:O(1)*

> Example 3: Given two sorted integer arrays arr1 and arr2, return a new
> array that combines both of them and is also sorted.

::: panel-tabset
## Java

``` java
public static List<Integer> combinedSorted(int[] arr1, int[]arr2){

        
        List<Integer>  arr3 = new ArrayList<>();
        int i =0;
        int j =0;

        while(i <arr1.length && j<arr2.length){
            if(arr1[i]<arr2[j]){
                arr3.add(arr1[i]);
                i++;
            }
            else{
                arr3.add(arr2[j]);
                j++;
            }
            
        }
        // After the first while loop one of the arrays will have gone through completly
        while (i < arr1.length) {
            arr3.add(arr1[i]);
            i++;
        }
    
        while (j < arr2.length) {
            arr3.add(arr2[j]);
            j++;
        }
    
        return arr3;
    }
}
```
:::

*Time: O(n) Space:O(1)*

> Example 4: 392. Is Subsequence. Given two strings s and t, return true
> if s is a subsequence of t, or false otherwise.

::: panel-tabset
## Java

``` java

 public static boolean checkIfSubsequence(String s, String t){
    int i =0;
    int j =0;

    while(i < s.length() && j<t.length()){
        if(s.charAt(i)==t.charAt(j)){
            i++;
        }
         
        j++;
        
    }
    return i == s.length();
 }

}
```
:::

*Time: O(n) Space:O(1)*

A subsequence of a string is a sequence of characters that can be
obtained by deleting some (or none) of the characters from the original
string, while maintaining the relative order of the remaining
characters. For example, "ace" is a subsequence of "abcde" while "aec"
is not.

## Two Pointers Examples

> Reverse String Write a function that reverses a string. The input
> string is given as an array of characters s. You must do this by
> modifying the input array in-place with O(1) extra memory

::: panel-tabset
## Java

``` java
 public static void reverseString(char[] s) {
        int i = s.length-1; 
        int j= 0; 
        
        while(i > j ){
            char tmp = s[j];
            s[j++]=s[i];
            s[i--]=tmp;
        }
        System.out.println(s);
        
    }   
```

## Python

``` python

class Solution(object):
    def reverseString(self, s):
    s.reverse()
```
:::

> **Squares of a Sorted Array** Given an integer array nums sorted in
> non-decreasing order, return an array of the squares of each number
> sorted in non-decreasing order.

::: panel-tabset
## Java

``` java
    public int[] sortedSquares(int[] nums) {
        
        int left = 0;
        int right = nums.length-1;

        while(left <= right){
        
            int tmp = nums[left]*nums[left];
            nums[left] = tmp;
            left++;
        }
        Arrays.sort(nums);

        return nums;
    }
```

## Java

``` java
//After my first submission I realized this could be cleaner
    public int[] sortedSquares(int[] nums) {
        for(int i=0; i< nums.length;i++){
            nums[i] = nums[i] * nums[i];
        }
        Arrays.sort(nums);
        return nums;
    }
```

## Python

``` python
def sortedSquares(self, nums: List[int]) -> List[int]:
  for i in range(len(nums)):
      nums[i] = nums[i] *nums[i]
  nums = sorted(nums)
  return nums
```
:::

# Sliding Window

*Similar to two pointers they're iterables with ordered elements.*

## Subarrays

Continuous section of the array. All the elements must be **adjacent to
each other and in their original order**

Example: \[1,2,3,4\]

-   \[1\],\[2\],\[3\],\[4\]
-   \[1,2\],\[2,3\],\[3,4\]
-   \[1,2,3\], \[2,3,4\]

Identifying when to use this:

The problem will: 1. Explicitly or implicitly define criteria that makes
a subarray "valid". 2. Ask you to find valid subarrays in some way -
find the "best" valid subarray - finding the number of valid subarrays

## Psudocode

``` java
function fn(nums, k):
    left = 0
    curr = 0
    answer = 0
    for (int right = 0; right < nums.length; right++):
        curr += nums[right]
        while (curr > k):
            curr -= nums[left]
            left++

        answer = max(answer, right - left + 1)

    return answer
```

> Example 1: Given an array of positive integers nums and an integer k,
> find the length of the longest subarray whose sum is less than or
> equal to k. This is the problem we have been talking about above. We
> will now formally solve it.

## Java

``` java
    public static int subarray(int[] nums, int k) {
        int left =0;
        int sum = 0;
        int answer = 0;

        for(int right =0; right<nums.length;right++){
            sum += nums[right];
            while(sum > k){
                sum -= nums[left];
                left++;
            }
            answer = Math.max(answer, right - left + 1);

        }
```

> Example 2: You are given a binary string s (a string containing only
> "0" and "1"). You may choose up to one "0" and flip it to a "1". What
> is the length of the longest substring achievable that contains only
> "1"? For example, given s = "1101100111", the answer is 5. If you
> perform the flip at index 2, the string becomes 1111100111.

::: panel-tabset
## Java

``` java
public static int binarySubarray(String s) {
    int left =0;
    int counter = 0;
    int answer = 0;

    for(int i =0; i<s.length();i++){
        if (s.charAt(i)== '0') {
            counter++;

        }

        while(counter > 1){
            if (s.charAt(left) == '0') {
                counter--;
            }

            left++;
        }

        answer = Math.max(answer, i - left + 1);
    }

        
        return answer;

    }
```

## Python

``` python
def binarySubarray(s):

    left=counter=answer=0

    for i in range(len(s)):
        if s[i] =="0":
            counter +=1
        while counter > 1:
            if(s[left] == "0"):
                counter -= 1
            left += 1

        ans = max(answer, i - left + 1)

    return(ans)
```
:::

## Number of Subarrays

> **Example 3: 713. Subarray Product Less Than K.** Given an array of
> positive integers nums and an integer k, return the number of
> subarrays where the product of all the elements in the subarray is
> strictly less than k. For example, given the input nums = \[10, 5, 2,
> 6\], k = 100, the answer is 8. The subarrays with products less than k
> are:\[10\], \[5\], \[2\], \[6\], \[10, 5\], \[5, 2\], \[2, 6\], \[5,
> 2, 6\]

``` java
public static int productLessThan(int[] nums, int k) {
        int left =0;
        int counter = 1;
        int answer = 0;

        if (k <= 1) {
            return 0;
        }
        for(int right =0; right<nums.length;right++){
            counter *= nums[right];
            while(counter>=k){
                counter /= nums[left]; //opposite of multiplication remove that element 
                left += 1;
            }
            answer += right -left +1;
    }
        return answer;

    }
```

## Fixed window size

## Psudocode

``` java
function fn(arr, k):
    curr = some data to track the window

    // build the first window
    for (int i = 0; i < k; i++)
        Do something with curr or other variables to build first window

    ans = answer variable, probably equal to curr here depending on the problem
    for (int i = k; i < arr.length; i++)
        Add arr[i] to window
        Remove arr[i - k] from window
        Update ans

    return ans
```

## Leetcode Problem

> **Example 4**: Given an integer array nums and an integer k, find the
> sum of the subarray with the largest sum whose length is k.

``` java
public static int productLessThan(int[] nums, int k) {
        int left =0;
        int counter = 1;
        int answer = 0;

        if (k <= 1) {
            return 0;
        }
        for(int right =0; right<nums.length;right++){
            counter *= nums[right];
            while(counter>=k){
                counter /= nums[left]; //opposite of multiplication remove that element 
                left += 1;
            }
            answer += right -left +1;
    }
        return answer;

    }
```

**1004. Max Consecutive Ones III**: Given a binary array nums and an
integer k, return the maximum number of consecutive 1's in the array if
you can flip at most k 0's.

Example 1: Input: nums = \[1,1,1,0,0,0,1,1,1,1,0\], k = 2 Output: 6
Explanation: \[1,1,1,0,0,**1**,1,1,1,1,**1**\] Bolded numbers were
flipped from 0 to 1. The longest subarray is underlined..

::: panel-tabset
## Java

``` java
public static int productLessThan(int[] nums, int k) {
        int left =0;
        int counter = 1;
        int answer = 0;

        if (k <= 1) {
            return 0;
        }
        for(int right =0; right<nums.length;right++){
            counter *= nums[right];
            while(counter>=k){
                counter /= nums[left]; //opposite of multiplication remove that element 
                left += 1;
            }
            answer += right -left +1;
    }
        return answer;

    }
```

Time complexity:O(n) Space complexity:O(1) *3ms Runtime Beats 79.28% of
users with Java*
:::

# Prefix Sum

Prefix sum is a technique that can be used on arrays (of numbers). The
idea is to create an array prefix where prefix\[i\] is the sum of all
elements up to the index i (inclusive). For example, given nums = \[5,
2, 1, 6, 3, 8\], we would have prefix = \[5, 7, 8, 14, 17, 25\].

If we want the sum of the subarray from i to j (inclusive), then the
answer is prefix\[j\] - prefix\[i - 1\], or prefix\[j\] - prefix\[i\] +
nums\[i\] if you don't want to deal with the out of bounds case when i =
0.

``` java
public boolean[] answerQueries(int[] nums, int[][] queries, int limit) {
    int[] prefix = new int[nums.length];
    prefix[0] = nums[0];

    for (int i = 1; i < nums.length; i++) {
        prefix[i] = prefix[i - 1] + nums[i];
    }

    boolean[] ans = new boolean[queries.length];
    for (int i = 0; i < queries.length; i++) {
        int x = queries[i][0], y = queries[i][1];
        int curr = prefix[y] - prefix[x] + nums[x];
        ans[i] = curr < limit;
    }
    
    return ans;
}
```

## Leetcode Problem

Given an array nums. We define a running sum of an array as
runningSum\[i\] = sum(nums\[0\]...nums\[i\]). **Return the running sum
of nums**

Example 1: Input: nums = \[1,2,3,4\] Output: \[1,3,6,10\] Explanation:
Running sum is obtained as follows: \[1, 1+2, 1+2+3, 1+2+3+4\].

::: panel-tabset
## Java

``` java
    private static int[] runningSum(int[] nums) {
        int [] prefix = new int[nums.length];
        prefix[0]=nums[0];
        for(int i=1;i<nums.length;i++){
            prefix[i] = nums[i]+prefix[i-1];
        }
        return prefix;

    }
```

Time complexity:O(n) Space complexity:O(n) **It creates an additional
array prefix of the same length as the input array nums. The size of the
prefix array is proportional to the size of the input array, making the
space complexity linear.**

*Runtime 0ms Beats100.00% of users with Java*
:::

# More Common Patters

## O(n) String Building

::: panel-tabset
## Python

``` python
def build_string(s):
  arr=[] #declar a list
  for c in s
      arr.append(c) #add the characters to the list 
    return "".join(list) # convert the list to a string 
```

*O(n)*

## Java

``` java
public string buildString(String s) {
    StringBuilder sb = new StringBuilder(); //use string builder
    for (int i = 0; i < s.length(); i++) {
        sb.append(s.charAt(i)); // add character to the list
    }
    StringBuilder.toString() // convert list to string
    return sb.toString();

    
```

*O(n)*
:::

# Extra Leetcode Problems

557. Reverse Words in a String III Given a string s, reverse the order
     of characters in each word within a sentence while still preserving
     whitespace and initial word order.

> Example 1: Input: s = "Let's take LeetCode contest" Output: "s'teL
> ekat edoCteeL tsetnoc" Example 2:

> Input: s = "Mr Ding" Output: "rM gniD"

::: panel-tabset
## Java

``` java
private static String reverseWords(String s) {

        StringBuilder sb = new StringBuilder();
        
        int left=0;

        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == ' ') {
                // Reverse the word and append to StringBuilder
                for (int j = i - 1; j >= left; j--) {
                    sb.append(s.charAt(j));
                }
                // Append the space
                sb.append(' ');
                // Update the left pointer to the next character
                left = i + 1;
            } else if (i == s.length() - 1) {
                // Reverse the last word and append to StringBuilder
                for (int j = i; j >= left; j--) {
                    sb.append(s.charAt(j));
                }
            }
        }
    
        return sb.toString();

        }
```

*Runtime 9ms Beats 44.51% of users with Java*
:::
